// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id                      Int       @id @default(autoincrement())
  shopDomain              String    @unique @map("shop_domain")
  accessToken             String    @map("access_token")
  scope                   String?
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  isActive                Boolean   @default(true) @map("is_active")
  apiKey                  String?   @map("api_key")
  improvementApiEnabled   Boolean   @default(false) @map("improvement_api_enabled")
  
  webhooks                Webhook[]
  products                Product[]
  
  @@index([shopDomain])
  @@map("stores")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean?
  locale        String?
  collaborator  Boolean?
  emailVerified Boolean?
}

model Webhook {
  id          Int      @id @default(autoincrement())
  shopDomain  String   @map("shop_domain")
  topic       String
  webhookId   String   @map("webhook_id")
  createdAt   DateTime @default(now()) @map("created_at")
  
  store       Store    @relation(fields: [shopDomain], references: [shopDomain], onDelete: Cascade)
  
  @@index([shopDomain])
  @@map("webhooks")
}

model Product {
  id          Int           @id @default(autoincrement())
  shopDomain  String        @map("shop_domain")
  productId   BigInt        @map("product_id")
  title       String?
  handle      String?
  description String?
  vendor      String?
  productType String?       @map("product_type")
  images      Json?
  variants    Json?
  status      String        @default("pending_improvement")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  store        Store         @relation(fields: [shopDomain], references: [shopDomain], onDelete: Cascade)
  improvements Improvement[]
  
  @@unique([shopDomain, productId])
  @@index([shopDomain])
  @@index([status])
  @@map("products")
}

model Improvement {
  id                  Int       @id @default(autoincrement())
  productId           Int       @map("product_id")
  improvedTitle       String?   @map("improved_title")
  improvedDescription String?   @map("improved_description")
  improvedImages      Json?     @map("improved_images")
  improvedSeo         Json?     @map("improved_seo")
  status              String    @default("pending_approval")
  createdAt           DateTime  @default(now()) @map("created_at")
  approvedAt          DateTime? @map("approved_at")
  rejectedAt          DateTime? @map("rejected_at")
  appliedAt           DateTime? @map("applied_at")
  
  product             Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([status])
  @@map("improvements")
}

model ApiToken {
  id        Int      @id @default(autoincrement())
  service   String   @unique
  token     String
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("api_tokens")
}